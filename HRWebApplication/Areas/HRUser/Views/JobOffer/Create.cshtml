@model CreateJobOfferViewModel
@{
    ViewData["Title"] = "Create";
}

<div class="row page-box">
    <div class="col-sm-12 col col-lg-6">
        <h2 class="text-center">Now J☺b Offer</h2>
        @using (Html.BeginForm("Create", "JobOffer", new { Area = "HRUser", Model }, FormMethod.Post, null, null))
        {
            @Html.AntiForgeryToken()
            <div class="form-group">
                @Html.LabelFor(m => m.Title)
                <input type="text" asp-for="Title" class="form-control" placeholder="Job offer title" data-bind="value: title" />
                @Html.ValidationMessageFor(m => m.Title, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Company)
                @Html.DropDownListFor(m => m.CompanyId,
                    Model.Companies.Select(c => new SelectListItem { Text = c.Name, Value = c.Id.ToString() }),
                    new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.CompanyId, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Specialization)
                <input type="text" asp-for="Specialization" class="form-control" placeholder="Enter specialization" data-bind="value: specialization" />
                @Html.ValidationMessageFor(m => m.Specialization, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Location)
                <input type="text" asp-for="Location" class="form-control" placeholder="Enter location" data-bind="value: location" />
                @Html.ValidationMessageFor(m => m.Location, "", new { @class = "text-danger" })
            </div>

            <div class="form-row align-items-center">
                <div class="col-auto">
                    @Html.LabelFor(m => m.SalaryFrom)
                    <input type="number" asp-for="SalaryFrom" class="form-control" placeholder="From" data-bind="value: salaryFrom" />
                    @Html.ValidationMessageFor(m => m.SalaryFrom, "", new { @class = "text-danger" })

                </div>
                <div class="col-auto">
                    @Html.LabelFor(m => m.SalaryTo)
                    <input type="number" asp-for="SalaryTo" class="form-control" placeholder="To" data-bind="value: salaryTo" />
                    @Html.ValidationMessageFor(m => m.SalaryTo, "", new { @class = "text-danger" })
                </div>
                <div class="col-auto">
                    @Html.LabelFor(m => m.Currency)
                    @Html.DropDownListFor(
                        m => m.Currency, Html.GetEnumSelectList(typeof(Currency)), new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Currency, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.ValidUntil)
                <div class="input-group">
                    @Html.EditorFor(m => m.ValidUntil, new { htmlAttributes = new { @class = "form-control", type = "Date" } })
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
                @Html.ValidationMessageFor(m => m.ValidUntil, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Overview)
                <textarea asp-for="Overview" class="form-control" placeholder="Enter short description of your offer" data-bind="value: overview"></textarea>
                @Html.ValidationMessageFor(m => m.Overview, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Description)
                <textarea asp-for="Description" class="form-control" placeholder="Enter full description"></textarea>
                @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Create</button>
            </div>
        }
    </div>
    <div class="col-sm-12 col-lg-6 align-content-center">
        <h4 class="text-center">Preview</h4>
        <div class="d-flex justify-content-center sticky-top mt-4">
            <div class="card bg-light mt-3" style="max-width: 25rem; min-width: 16rem;">
                <div class="card-header"><h4 class="card-title" data-bind="text: title"></h4></div>
                <div class="card-body">
                    <h5 class="card-title"><strong class="card-text" data-bind="text: salaryFrom"></strong>-<strong class="card-text" data-bind="text: salaryTo"></strong></h5>
                    <p class="card-text h-100" data-bind="text: overview"></p>
                </div>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">Location: <strong class="card-text" data-bind="text: location"></strong></li>
                    <li class="list-group-item">Specialization: <strong class="card-text" data-bind="text: specialization"></strong></li>
                </ul>
                <div class="card-footer text-center"><small>Added on @DateTime.Now.ToShortDateString()</small></div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <partial name="_ValidationScriptsPartial" />
    <script src="~/lib/knockout/knockout-3.5.1.js"></script>
    <script>
        function LocalViewModel() {
            this.title = ko.observable("");
            this.overview = ko.observable("");
            this.location = ko.observable("");
            this.specialization = ko.observable("");
            this.salaryFrom = ko.observable("");
            this.salaryTo = ko.observable("");
        }
        // Activates knockout.js
        ko.applyBindings(new LocalViewModel());
    </script>
}